#include "des.h"

using std::string;

DesKey::DesKey(const void* key, size_t size)
  {
  memset(_key, 0, sizeof(_key));
  if(size == 0)
    {
    const char* k = (const char*)key;
    while(k[size] != '\0') ++size;
    }
  if(size > sizeof(_key))  size = sizeof(_key);
  memcpy(_key, key, size);
  }

//! 初始置换表
static const unsigned char IP_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02, // 0
  0x3C, 0x34, 0x2C, 0x24, 0x1C, 0x14, 0x0C, 0x04, // 1
  0x3E, 0x36, 0x2E, 0x26, 0x1E, 0x16, 0x0E, 0x06, // 2
  0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08, // 3
  0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01, // 4
  0x3B, 0x33, 0x2B, 0x23, 0x1B, 0x13, 0x0B, 0x03, // 5
  0x3D, 0x35, 0x2D, 0x25, 0x1D, 0x15, 0x0D, 0x05, // 6
  0x3F, 0x37, 0x2F, 0x27, 0x1F, 0x17, 0x0F, 0x07, // 7
  };

//! 逆置换表
static const unsigned char RP_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x28, 0x08, 0x30, 0x10, 0x38, 0x18, 0x40, 0x20, // 0
  0x27, 0x07, 0x2F, 0x0F, 0x37, 0x17, 0x3F, 0x1F, // 1
  0x26, 0x06, 0x2E, 0x0E, 0x36, 0x16, 0x3E, 0x1E, // 2
  0x25, 0x05, 0x2D, 0x0D, 0x35, 0x15, 0x3D, 0x1D, // 3
  0x24, 0x04, 0x2C, 0x0C, 0x34, 0x14, 0x3C, 0x1C, // 4
  0x23, 0x03, 0x2B, 0x0B, 0x33, 0x13, 0x3B, 0x1B, // 5
  0x22, 0x02, 0x2A, 0x0A, 0x32, 0x12, 0x3A, 0x1A, // 6
  0x21, 0x01, 0x29, 0x09, 0x31, 0x11, 0x39, 0x19, // 7
  };

//! 密码置换表1
static const unsigned char PC1_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01,  // 0
  0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02,  // 1
  0x3B, 0x33, 0x2B, 0x23, 0x1B, 0x13, 0x0B, 0x03,  // 2
  0x3C, 0x34, 0x2C, 0x24, 0x3F, 0x37, 0x2F, 0x27,  // 3
  0x1F, 0x17, 0x0F, 0x07, 0x3E, 0x36, 0x2E, 0x26,  // 4
  0x1E, 0x16, 0x0E, 0x06, 0x3D, 0x35, 0x2D, 0x25,  // 5
  0x1D, 0x15, 0x0D, 0x05, 0x1C, 0x14, 0x0C, 0x04,  // 6
  };

//! 密码置换表2
static const unsigned char PC2_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x0E, 0x11, 0x0B, 0x18, 0x01, 0x05, 0x03, 0x1C,  // 0
  0x0F, 0x06, 0x15, 0x0A, 0x17, 0x13, 0x0C, 0x04,  // 1
  0x1A, 0x08, 0x10, 0x07, 0x1B, 0x14, 0x0D, 0x02,  // 2
  0x29, 0x34, 0x1F, 0x25, 0x2F, 0x37, 0x1E, 0x28,  // 3
  0x33, 0x2D, 0x21, 0x30, 0x2C, 0x31, 0x27, 0x38,  // 4
  0x22, 0x35, 0x2E, 0x2A, 0x32, 0x24, 0x1D, 0x20,  // 5
  };

//! 循环左移表
static const unsigned char Shift_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 0
  0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01,  // 1
  0
  };

//! 放大换位表
static const unsigned char EO_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05,  // 0
  0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x0B,  // 1
  0x0C, 0x0D, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,  // 2
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15,  // 3
  0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x1B,  // 4
  0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x01,  // 5
  };

//! 单纯换位表
static const unsigned char PP_TB[] =
  {
  //0     1     2     3     4     5     6     7
  0x10, 0x07, 0x14, 0x15, 0x1D, 0x0C, 0x1C, 0x11, // 0
  0x01, 0x0F, 0x17, 0x1A, 0x05, 0x12, 0x1F, 0x0A, // 1
  0x02, 0x08, 0x18, 0x0E, 0x20, 0x1B, 0x03, 0x09, // 2
  0x13, 0x0D, 0x1E, 0x06, 0x16, 0x0B, 0x04, 0x19, // 3
  };

//! SBox
static const unsigned char sBox[8][4][16] =
  {
  //0     1     2     3     4     5     6     7
  0x0E, 0x04, 0x0D, 0x01, 0x02, 0x0F, 0x0B, 0x08, // 0
  0x03, 0x0A, 0x06, 0x0C, 0x05, 0x09, 0x00, 0x07, // 1
  0x00, 0x0F, 0x07, 0x04, 0x0E, 0x02, 0x0D, 0x01, // 2
  0x0A, 0x06, 0x0C, 0x0B, 0x09, 0x05, 0x03, 0x08, // 3
  0x04, 0x01, 0x0E, 0x08, 0x0D, 0x06, 0x02, 0x0B, // 4
  0x0F, 0x0C, 0x09, 0x07, 0x03, 0x0A, 0x05, 0x00, // 5
  0x0F, 0x0C, 0x08, 0x02, 0x04, 0x09, 0x01, 0x07, // 6
  0x05, 0x0B, 0x03, 0x0E, 0x0A, 0x00, 0x06, 0x0D, // 7

  0x0F, 0x01, 0x08, 0x0E, 0x06, 0x0B, 0x03, 0x04, // 0
  0x09, 0x07, 0x02, 0x0D, 0x0C, 0x00, 0x05, 0x0A, // 1
  0x03, 0x0D, 0x04, 0x07, 0x0F, 0x02, 0x08, 0x0E, // 2
  0x0C, 0x00, 0x01, 0x0A, 0x06, 0x09, 0x0B, 0x05, // 3
  0x00, 0x0E, 0x07, 0x0B, 0x0A, 0x04, 0x0D, 0x01, // 4
  0x05, 0x08, 0x0C, 0x06, 0x09, 0x03, 0x02, 0x0F, // 5
  0x0D, 0x08, 0x0A, 0x01, 0x03, 0x0F, 0x04, 0x02, // 6
  0x0B, 0x06, 0x07, 0x0C, 0x00, 0x05, 0x0E, 0x09, // 7

  0x0A, 0x00, 0x09, 0x0E, 0x06, 0x03, 0x0F, 0x05, // 0
  0x01, 0x0D, 0x0C, 0x07, 0x0B, 0x04, 0x02, 0x08, // 1
  0x0D, 0x07, 0x00, 0x09, 0x03, 0x04, 0x06, 0x0A, // 2
  0x02, 0x08, 0x05, 0x0E, 0x0C, 0x0B, 0x0F, 0x01, // 3
  0x0D, 0x06, 0x04, 0x09, 0x08, 0x0F, 0x03, 0x00, // 4
  0x0B, 0x01, 0x02, 0x0C, 0x05, 0x0A, 0x0E, 0x07, // 5
  0x01, 0x0A, 0x0D, 0x00, 0x06, 0x09, 0x08, 0x07, // 6
  0x04, 0x0F, 0x0E, 0x03, 0x0B, 0x05, 0x02, 0x0C, // 7

  0x07, 0x0D, 0x0E, 0x03, 0x00, 0x06, 0x09, 0x0A, // 0
  0x01, 0x02, 0x08, 0x05, 0x0B, 0x0C, 0x04, 0x0F, // 1
  0x0D, 0x08, 0x0B, 0x05, 0x06, 0x0F, 0x00, 0x03, // 2
  0x04, 0x07, 0x02, 0x0C, 0x01, 0x0A, 0x0E, 0x09, // 3
  0x0A, 0x06, 0x09, 0x00, 0x0C, 0x0B, 0x07, 0x0D, // 4
  0x0F, 0x01, 0x03, 0x0E, 0x05, 0x02, 0x08, 0x04, // 5
  0x03, 0x0F, 0x00, 0x06, 0x0A, 0x01, 0x0D, 0x08, // 6
  0x09, 0x04, 0x05, 0x0B, 0x0C, 0x07, 0x02, 0x0E, // 7

  0x02, 0x0C, 0x04, 0x01, 0x07, 0x0A, 0x0B, 0x06, // 0
  0x08, 0x05, 0x03, 0x0F, 0x0D, 0x00, 0x0E, 0x09, // 1
  0x0E, 0x0B, 0x02, 0x0C, 0x04, 0x07, 0x0D, 0x01, // 2
  0x05, 0x00, 0x0F, 0x0A, 0x03, 0x09, 0x08, 0x06, // 3
  0x04, 0x02, 0x01, 0x0B, 0x0A, 0x0D, 0x07, 0x08, // 4
  0x0F, 0x09, 0x0C, 0x05, 0x06, 0x03, 0x00, 0x0E, // 5
  0x0B, 0x08, 0x0C, 0x07, 0x01, 0x0E, 0x02, 0x0D, // 6
  0x06, 0x0F, 0x00, 0x09, 0x0A, 0x04, 0x05, 0x03, // 7

  0x0C, 0x01, 0x0A, 0x0F, 0x09, 0x02, 0x06, 0x08, // 0
  0x00, 0x0D, 0x03, 0x04, 0x0E, 0x07, 0x05, 0x0B, // 1
  0x0A, 0x0F, 0x04, 0x02, 0x07, 0x0C, 0x09, 0x05, // 2
  0x06, 0x01, 0x0D, 0x0E, 0x00, 0x0B, 0x03, 0x08, // 3
  0x09, 0x0E, 0x0F, 0x05, 0x02, 0x08, 0x0C, 0x03, // 4
  0x07, 0x00, 0x04, 0x0A, 0x01, 0x0D, 0x0B, 0x06, // 5
  0x04, 0x03, 0x02, 0x0C, 0x09, 0x05, 0x0F, 0x0A, // 6
  0x0B, 0x0E, 0x01, 0x07, 0x06, 0x00, 0x08, 0x0D, // 7

  0x04, 0x0B, 0x02, 0x0E, 0x0F, 0x00, 0x08, 0x0D, // 0
  0x03, 0x0C, 0x09, 0x07, 0x05, 0x0A, 0x06, 0x01, // 1
  0x0D, 0x00, 0x0B, 0x07, 0x04, 0x09, 0x01, 0x0A, // 2
  0x0E, 0x03, 0x05, 0x0C, 0x02, 0x0F, 0x08, 0x06, // 3
  0x01, 0x04, 0x0B, 0x0D, 0x0C, 0x03, 0x07, 0x0E, // 4
  0x0A, 0x0F, 0x06, 0x08, 0x00, 0x05, 0x09, 0x02, // 5
  0x06, 0x0B, 0x0D, 0x08, 0x01, 0x04, 0x0A, 0x07, // 6
  0x09, 0x05, 0x00, 0x0F, 0x0E, 0x02, 0x03, 0x0C, // 7

  0x0D, 0x02, 0x08, 0x04, 0x06, 0x0F, 0x0B, 0x01, // 0
  0x0A, 0x09, 0x03, 0x0E, 0x05, 0x00, 0x0C, 0x07, // 1
  0x01, 0x0F, 0x0D, 0x08, 0x0A, 0x03, 0x07, 0x04, // 2
  0x0C, 0x05, 0x06, 0x0B, 0x00, 0x0E, 0x09, 0x02, // 3
  0x07, 0x0B, 0x04, 0x01, 0x09, 0x0C, 0x0E, 0x02, // 4
  0x00, 0x06, 0x0A, 0x0D, 0x0F, 0x03, 0x05, 0x08, // 5
  0x02, 0x01, 0x0E, 0x07, 0x04, 0x0A, 0x08, 0x0D, // 6
  0x0F, 0x0C, 0x09, 0x00, 0x03, 0x05, 0x06, 0x0B, // 7
  };

static void movram(const unsigned char* source,
                   unsigned char*       target,
                   const size_t         length)
  {
  for(size_t i = 0; i < length; ++i)
    {
    target[i] = source[i];
    }
  }

static void doxor(unsigned char*        sourceaddr,
                  const unsigned char*  targetaddr,
                  const size_t          length)
  {
  for(size_t i = 0; i < length; ++i)
    {
    sourceaddr[i] ^= targetaddr[i];
    }
  }

static void setbit(unsigned char*       dataddr,
                   const size_t         pos,
                   const unsigned char  b)
  {
  size_t byte_count = (pos - 1) / 8;
  size_t bit_count = 7 - ((pos - 1) % 8);
  unsigned char temp = 1 << bit_count;
  if(b)
    {
    dataddr[byte_count] |= temp;
    }
  else
    {
    temp = ~temp;
    dataddr[byte_count] &= temp;
    }
  }

static unsigned char getbit(const unsigned char*  dataddr,
                            const size_t          pos)
  {
  size_t byte_count = (pos - 1) / 8;
  size_t bit_count = 7 - ((pos - 1) % 8);
  unsigned char temp = 1 << bit_count;
  if(dataddr[byte_count] & temp)
    {
    return(1);
    }
  else
    {
    return(0);
    }
  }

static void selectbits(const unsigned char* source,
                       const unsigned char* table,
                       unsigned char*       target,
                       const size_t         count)
  {
  for(size_t i = 0; i < count; ++i)
    {
    setbit(target, i + 1, getbit(source, table[i]));
    }
  }

static void shlc(unsigned char* data_p)
  {
  unsigned char b = getbit(data_p, 1);

  for(size_t i = 0; i < 7; ++i)
    {
    data_p[i] <<= 1;
    if(i != 6)
      {
      setbit(&data_p[i], 8, getbit(&data_p[i + 1], 1));
      }
    }

  setbit(data_p, 56, getbit(data_p, 28));
  setbit(data_p, 28, b);
  }

static void shrc(unsigned char* data_p)
  {
  unsigned char b = getbit(data_p, 56);

  for(intptr_t i = 6; i >= 0; i--)
    {
    data_p[i] >>= 1;
    if(i != 0)
      {
      setbit(&data_p[i], 1, getbit(&data_p[i - 1], 8));
      }
    }

  setbit(data_p, 1, getbit(data_p, 29));
  setbit(data_p, 29, b);
  }

static void strans(const unsigned char* index,
                   unsigned char*       target)
  {
  for(size_t i = 0; i < 4; ++i)
    {
    unsigned char row = 0;
    unsigned char line = 0;
    unsigned char t = 0;
    setbit(&line, 7, getbit(index, i * 12 + 1));
    setbit(&line, 8, getbit(index, i * 12 + 6));

    for(size_t j = 2; j < 6; ++j)
      {
      setbit(&row, 3 + j, getbit(index, i * 12 + j));
      }

    t = sBox[i * 2][line][row];
    t <<= 4;
    line = row = 0;
    setbit(&line, 7, getbit(index, i * 12 + 7));
    setbit(&line, 8, getbit(index, i * 12 + 12));

    for(size_t j = 2; j < 6; ++j)
      {
      setbit(&row, 3 + j, getbit(index, i * 12 + 6 + j));
      }

    t |= sBox[i * 2 + 1][line][row];
    target[i] = t;
    }
  }

static void des(unsigned char*        data_p,
                const unsigned char*  key_p,
                int                   type)
  {
  unsigned char tempbuf[12];
  unsigned char key[7];
  void(*f)(unsigned char* data_p);

  selectbits(data_p, IP_TB, tempbuf, 64);
  movram(tempbuf, data_p, 8);
  selectbits(key_p, PC1_TB, key, 56);

  for(size_t i = 0; i < 16; ++i)
    {
    selectbits(data_p + 4, EO_TB, tempbuf, 48);

    size_t count;
    if(type == 1)
      {
      f = shlc;
      count = i;
      }
    else
      {
      count = 16 - i;
      f = shrc;
      }

    for(size_t j = 0; j < Shift_TB[count]; ++j)
      {
      f(key);
      }

    selectbits(key, PC2_TB, tempbuf + 6, 48);
    doxor(tempbuf, tempbuf + 6, 6);
    strans(tempbuf, tempbuf + 6);
    selectbits(tempbuf + 6, PP_TB, tempbuf, 32);
    doxor(tempbuf, data_p, 4);

    if(i < 15)
      {
      movram(data_p + 4, data_p, 4);
      movram(tempbuf, data_p + 4, 4);
      }
    }

  movram(tempbuf, data_p, 4);
  selectbits(data_p, RP_TB, tempbuf, 64);
  movram(tempbuf, data_p, 8);
  }

string DesEncrypt(const void* encrypt_data, const size_t encrypt_size, const DesKey& encrypt_key)
  {
  string rets;
  const auto valid_count = encrypt_size - (encrypt_size % sizeof(DesKey));
  rets.append((const char*)encrypt_data, valid_count);

  const unsigned char* key_p = encrypt_key._key;
  unsigned char* data_p = (unsigned char*)rets.c_str();

  for(size_t i = 0; i < rets.size(); i += sizeof(DesKey))
    {
    des(&data_p[i], key_p, 1);
    }

  return rets;
  }

string DesDecrypt(const void* decrypt_data, const size_t decrypt_size, const DesKey& decrypt_key)
  {
  string rets;
  const auto valid_count = decrypt_size - (decrypt_size % sizeof(DesKey));
  rets.append((const char*)decrypt_data, valid_count);

  const unsigned char* key_p = decrypt_key._key;
  unsigned char* data_p = (unsigned char*)rets.c_str();

  for(size_t i = 0; i < rets.size(); i += sizeof(DesKey))
    {
    des(&data_p[i], key_p, 0);
    }

  return rets;
  }

#ifdef _XLIB_TEST_

ADD_XLIB_TEST(DES)
  {
  SHOW_TEST_INIT;

  bool done = false;

  const DesKey key("12345678");
  const string data("12345678");
  const string enc("\x96\xD0\x02\x88\x78\xD5\x8C\x89");

  SHOW_TEST_HEAD("DesEncrypt");
  done = (enc == DesEncrypt(data, key));
  SHOW_TEST_RESULT(done);

  SHOW_TEST_HEAD("DesDecrypt");
  done = (data == DesDecrypt(enc, key));
  SHOW_TEST_RESULT(done);
  }

#endif  // _XLIB_TEST_